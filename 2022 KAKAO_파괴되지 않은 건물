2022 KAKAO BLIND RECRUITMENT_파괴되지 않은 건물

최초엔 정확성만을 고려하고 문제를 풀었기에 정확성은 100점이었지만, 효율성에서 시간초과가 나왔다.

해당 문제는 DP를 이용한 문제였으며, 코드는 아래와 같습니다. 
- 제일 아래 주석부분은 최초의 시간초과 코드

class Main {
        public static int solution(int[][] board, int[][] skill) {

            int answer = 0;
            int x = board.length;
            int y = board[0].length;
            int[][] sums = new int[x+1][y+1];

            for (int[] s : skill) {
                int chk = s[0];
                if(chk==1) { // 데미지
                    sums[s[1]][s[2]] -= s[5];
                    sums[s[3]+1][s[4]+1] -= s[5];
                    sums[s[1]][s[4]+1] += s[5];
                    sums[s[3]+1][s[2]] += s[5];
                }else {
                    sums[s[1]][s[2]] += s[5];
                    sums[s[3]+1][s[4]+1] += s[5];
                    sums[s[1]][s[4]+1] -= s[5];
                    sums[s[3]+1][s[2]] -= s[5];
                }
            }


            for (int j = 0; j <y+1; j++) {
                for (int i = 0; i < x; i++) {
                    sums[i+1][j] += sums[i][j];
                }
            }

            for (int i = 0; i <x+1; i++) {
                for (int j = 0; j < y; j++) {
                    sums[i][j+1] += sums[i][j];
                }
            }

            for (int i = 0; i <x; i++) {
                for (int j = 0; j <y; j++) {
                    if(sums[i][j] + board[i][j] > 0){
                        answer++;
                    }
                }
            }
            return answer;
        }

    public static void main(String[] args) {

        int[][] board = {{5,5,5,5,5},{5,5,5,5,5},{5,5,5,5,5},{5,5,5,5,5}};
        int[][] skills = {{1,0,0,3,4,4},{1,2,0,2,3,2},{2,1,0,3,1,2},{1,0,1,3,3,1}};

//        int[][] board = {{1,2,3},{4,5,6},{7,8,9}};
//        int[][] skills = {{1,1,1,2,2,4},{1,0,0,1,1,2},{2,2,0,2,0,100}};

        System.out.println(solution(board,skills));
    }
}


//    public static int solution(int[][] board, int[][] skill) {
//            int answer = board.length * board[0].length;
//
//            for (int i = 0; i < skill.length; i++) {
//                int chk = skill[i][0];
//                int start = skill[i][1];
//                int end = skill[i][2];
//                int start2 = skill[i][3];
//                int end2 = skill[i][4];
//                int custom = skill[i][5];
//
//
//                int k = start;
//                int l = end;
//                int cl = end2;
//                while (k <= start2){
//                    int tmp =  board[k][l];
//                    if(chk == 1) {
//                        board[k][l] = board[k][l] + (custom * -1);
//                        if(tmp > 0 && board[k][l] <= 0 ){
//                            answer--;
//                        }
//                    }else {
//                        board[k][l] = board[k][l] + custom;
//                        if(tmp <= 0 && board[k][l] > 0 ){
//                            answer++;
//                        }
//                    }
//                    if(l != cl && l < cl){
//                        l++;
//                    }else {
//                        k++;
//                        l=end;
//                    }
//                }
//            }
//
//            return answer;
//}
