-맵을 이용한 1번 풀이 - 시간초과

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.StringTokenizer;

//5
//6 3 2 10 -10
//8
//10 9 -5 2 3 4 5 -10
public class Main {

    public ArrayList<Integer> solution(int n , int[] arr, int m, int[] arr2) {
        ArrayList<Integer> answer = new ArrayList<>();

        HashMap<Integer,Integer> aa = new HashMap<>();

        for (int i = 0; i < n; i++) {
            aa.put(arr[i],aa.getOrDefault(arr[i]+1,0));
        }
        for (int i = 0; i < m; i++) {
            int tmp=0;
            for (int x : aa.keySet()){
                if(arr2[i] == x){
                    tmp=1;
                }
            }
            answer.add(tmp);
        }

        return answer;

    }

    public static void main(String[] args) throws IOException {
        Main T = new Main();
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        StringTokenizer st = new StringTokenizer(br.readLine());
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i]= Integer.parseInt(st.nextToken());
        }
        int m = Integer.parseInt(br.readLine());
        int[] arr2 = new int[m];
        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < m; i++) {
            arr2[i]= Integer.parseInt(st.nextToken());
        }

        for (Integer a : T.solution(n,arr,m,arr2)){
            System.out.print(a+" ");
        }
    }
}





- 이분탐색을 이용한 2번 풀이 - 정답

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

    public ArrayList<Integer> solution(int n , int[] arr, int m, int[] arr2) {
        ArrayList<Integer> answer = new ArrayList<>();

        Arrays.sort(arr);

        for (int i = 0; i <m ; i++) {
            int lt=0,rt=n-1,mid=0, target=arr2[i], tmp=0;
            while (lt<=rt){
                mid=(lt+rt)/2;
                if(arr[mid]==target) {
                    tmp=1;
                    break;
                }
                if(arr[mid] > target) rt = mid-1;
                else lt = mid+1;
            }
            answer.add(tmp);
        }

        return answer;

    }

    public static void main(String[] args) throws IOException {
        Main T = new Main();
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        StringTokenizer st = new StringTokenizer(br.readLine());
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i]= Integer.parseInt(st.nextToken());
        }
        int m = Integer.parseInt(br.readLine());
        int[] arr2 = new int[m];
        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < m; i++) {
            arr2[i]= Integer.parseInt(st.nextToken());
        }

        for (Integer a : T.solution(n,arr,m,arr2)){
            System.out.print(a+" ");
        }
    }
}
