import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class Main {

    static boolean[] check = new boolean[9];
    static ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
    private static void dfs(int x) {
        check[x] = true;
        System.out.print(x + " ");
        for (int i = 0; i <graph.get(x).size(); i++) {
            int y = graph.get(x).get(i);
            if(!check[y]) dfs(y);
        }
    }

    private static void bfs(int aa) {
        Queue<Integer> q = new LinkedList();
        q.offer(aa);
        check[aa] = true;

        while (!q.isEmpty()){
            int x = q.poll();
            System.out.print(x+" ");
            for (int i = 0; i < graph.get(x).size(); i++) {
                int y = graph.get(x).get(i);
                if (!check[y]) {
                    q.offer(y);
                    check[y] = true;
                }
            }
        }


    }

    public static void main(String[] args) {

        for (int i = 0; i < 9; i++) {
            graph.add(new ArrayList<>());
        }

        // 노드 1에 연결된 노드 정보 저장
        graph.get(1).add(2);
        graph.get(1).add(3);
        graph.get(1).add(8);

        // 노드 2에 연결된 노드 정보 저장
        graph.get(2).add(1);
        graph.get(2).add(7);

        // 노드 3에 연결된 노드 정보 저장
        graph.get(3).add(1);
        graph.get(3).add(4);
        graph.get(3).add(5);

        // 노드 4에 연결된 노드 정보 저장
        graph.get(4).add(3);
        graph.get(4).add(5);

        // 노드 5에 연결된 노드 정보 저장
        graph.get(5).add(3);
        graph.get(5).add(4);

        // 노드 6에 연결된 노드 정보 저장
        graph.get(6).add(7);

        // 노드 7에 연결된 노드 정보 저장
        graph.get(7).add(2);
        graph.get(7).add(6);
        graph.get(7).add(8);

        // 노드 8에 연결된 노드 정보 저장
        graph.get(8).add(1);
        graph.get(8).add(7);
//        System.out.println("DFS");
//        dfs(1);
        System.out.println("BFS");
        bfs(1);
    }
}
