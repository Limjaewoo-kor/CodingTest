import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {

    static class Point implements Comparable<Point> {
        int x ,y;

        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }

        @Override
        public int compareTo(Point o) {
            if (this.x == o.x) return this.y - o.y;
            else return this.x-o.x;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer stk = new StringTokenizer(br.readLine());

        int n = Integer.parseInt(stk.nextToken());
        ArrayList<Point> p = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            stk = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(stk.nextToken());
            int y = Integer.parseInt(stk.nextToken());
            p.add(new Point(x,y));
        }

        Collections.sort(p);

        PriorityQueue<Integer> pq = new PriorityQueue<>();
        pq.offer(p.get(0).y);

        for (int i = 1; i < n; i++) {
            if (pq.peek() <= p.get(i).x) {
                pq.poll();
            }
            pq.offer(p.get(i).y);
        }

        System.out.print(pq.size());
    }

}
