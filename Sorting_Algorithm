import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer stk = new StringTokenizer(br.readLine());

        int n = Integer.parseInt(stk.nextToken());
        int c = Integer.parseInt(stk.nextToken());
        int[] cache = new int[n];
        int[] data = new int[c];

        stk = new StringTokenizer(br.readLine());

        for (int i = 0; i < data.length; i++) {
            data[i] = Integer.parseInt(stk.nextToken());
        }

        int[] soultion = Soultion(n,c, data,cache);
        for (int i : soultion) {
            System.out.print(i +" ");
        }
    }

    //LRU
    private static int[] Soultion(int n, int c, int[] data, int[] cache) {
        //5 9
        //1 2 3 2 6 2 3 5 7
        //7 5 3 2 6
        for (int x : data) {
            int pos = -1;
            for (int i = 0; i < n; i++) {
                if(x == cache[i]){
                    pos = i;
                }
            }
            if(pos == -1) {
                for (int i = n-1; i >= 1; i--) {
                    cache[i] = cache[i-1];
                }
            }else {
                for (int i = pos; i >= 1; i--) {
                    cache[i] = cache[i-1];
                }
            }
            cache[0] = x;
        }
        return cache;
    }


//    //삽입정렬
//    private static int[] Soultion(int n, int[] arr) {
////    9
////    3 7 1 5 4 2 9 8 6
//        for (int i = 1; i < n; i++) {
//            int tmp = arr[i] ,j;
//            for ( j = i-1; j >= 0; j--) {
//                if(arr[j] > tmp) {
//                    arr[j+1] = arr[j];
//                }else {break;}
//            }
//            arr[j+1] = tmp;
//        }
//        return arr;
//    }


    // 버블정렬
//    private static int[] Soultion(int n, int[] arr){
////9
//// 3 7 1 5 4 2 9 8 6
//        for (int i = 0; i < n-1; i++) {
//            for (int j = 0; j <n-i-1 ; j++) {
//                if(arr[j] > arr[j+1]) {
//                    int tmp =arr[j+1];
//                    arr[j+1] = arr[j];
//                    arr[j] = tmp;
//                }
//            }
//        }
//        return arr;
//    }


    //선택정렬
//    private static int[] Soultion(int n, int[] arr) {
////         6
////        13 5 11 7 23 15
//        for (int i = 0; i < n; i++) {
//            int idx = i;
//            int tmp = 0;
//            for (int j = i+1; j < n ; j++) {
//                if(arr[j] < arr[idx]) {
//                    idx = j;
//                }
//            }
//            tmp = arr[i];
//            arr[i] =arr[idx];
//            arr[idx] = tmp;
//        }
//        return arr;
//    }

        //반 친구와 자리 변경문제 - Arrays.sort 사용
//      private static ArrayList<Integer> Soultion(int n, int[] cache) {
//        //9
//        //120 125 152 130 135 135 143 127 160
//        ArrayList<Integer> answer = new ArrayList<>();
//        int[] arr = cache.clone();
//        Arrays.sort(arr);
//        for (int i = 1; i < n; i++) {
//            if(arr[i] != cache[i]){
//                answer.add(i+1);
//            }
//        }
//        return answer;
//    }
}
