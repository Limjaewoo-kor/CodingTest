import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class Node {
    int x;
    int y;

    public Node(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public int getX() {
        return x;
    }

    public void setX(int x) {
        this.x = x;
    }

    public int getY() {
        return y;
    }

    public void setY(int y) {
        this.y = y;
    }
}

public class Main {

    static int n,k;
    static int[][] ch;
    static int[][] arr;
    static int[] dx = {1 ,-1,0,0};
    static int[] dy= {0 ,0,1,-1};
    
    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer stk = new StringTokenizer(br.readLine());

        n = Integer.parseInt(stk.nextToken());
        k = Integer.parseInt(stk.nextToken());
        ch = new int[n+1][k+1];

        arr = new int[n+1][k+1];

        for (int i = 0; i < n; i++) {
            String str = br.readLine();
            for (int j = 0; j < k; j++) {
                arr[i][j] = str.charAt(j)-'0';
            }
        }

        System.out.println(bfs(0,0));

    }

    private static int bfs(int x,int y) {
        Queue<Node> q = new LinkedList<>();
        q.offer(new Node(x,y));
        ch[0][0] = 1;

        while (!q.isEmpty()){
            Node nx = q.poll();
            for (int i = 0; i < 4; i++) {
                int a = nx.getX() + dx[i];
                int b = nx.getY() + dy[i];
                if (a >= 0 && b >= 0) {
                    if (arr[a][b] == 1 && ch[a][b] == 0) {
                        ch[a][b] = ch[nx.getX()][nx.getY()] + 1;
                        q.offer(new Node(a, b));
                    }
                }
            }
        }
        return ch[n-1][k-1];
    }

}
